module day2
    def sample = """Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
        Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
        Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
        Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
        Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green"""

    @outline
    module parse[Data]
        def game_string(i in Int, str in String) = lines[Data](i, str)
        
        def parse_game(i in Int, id in Int) = 
            game_part = string_split[":", game_string[i], 1]
            and string_split[" ", game_part, 2](idstr)
            and parse_int(idstr, id)
            from game_part, idstr

        def game_data(i in Int, j in Int, str in String) =
            data_part = string_split[": ", game_string[i], 2]
            and string_split["; ", data_part](j, str)
            from data_part

        @inline
        def get_color_data[color in String](i in Int, j in Int, cnt in Int) =
            game_data(i, j, data_str)
            and string_split[", ", data_str, _](color_str)
            and regex_match(color, color_str)
            and string_split(" ", color_str, 1, strcnt)
            and parse_int(strcnt, cnt)
            from data_str, color_str, strcnt

        def draws = get_color_data[color] | color in {"red"; "green"; "blue"}
    end
    
    module part1
        def bag = {
             "red", 12;
             "green", 13;
             "blue", 14;
        }

        @outline
        def max_draw[Data, color in String, game_id in Int] = max[parse[Data][:draws, color][game_id]]

        @outline
        def possible_draw(Data, color in String, game_id in Int) = bag(color, max_count) and
                max_draw[Data, color, game_id] <= max_count
                from max_count

        @outline
        def games[Data] = parse[Data][:parse_game, _]

        @outline
        def possible_game(Data, game_id in games[Data]) =
            forall(color in first[bag]: possible_draw(Data, color, game_id))

        @outline
        def result(Data, tot) = sum[possible_game[Data]](tot)
    end

    module part2
        @outline
        def min_set[Data](game_id, color, cnt) =
            max[parse[Data][:draws, color, game_id]](cnt)

        @outline
        def power[Data](game_id, pow) = product[min_set[Data, game_id]](pow)

        @outline
        def result[Data](tot) = sum[power[Data]](tot)
    end

end